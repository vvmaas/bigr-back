// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         Int          @id @default(autoincrement())
  email      String       @unique @db.VarChar(255)
  password   String?       @db.VarChar(255)
  name       String       @default("")
  height    Int           @default(0)
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  Session    Session[]
  Workout    Workout[]
  WorkoutExercise    WorkoutExercise[]
  Weight    Weight[]
}

model Weight {
  id        Int      @id @default(autoincrement())
  value     Float
  userId    Int
  User      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Session {
  id        Int      @id @default(autoincrement())
  userId    Int
  User      User     @relation(fields: [userId], references: [id])
  token     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Workout {
  id        Int      @id @default(autoincrement())
  userId    Int
  User      User     @relation(fields: [userId], references: [id])
  name      String
  deleted   Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  WorkoutExercise    WorkoutExercise[]
}

model Exercise {
  id        Int      @id @default(autoincrement())
  name      String
  namePt    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  WorkoutExercise    WorkoutExercise[]
  Target    Target[]
}

model Group {
  id        Int      @id @default(autoincrement())
  name      String
  namePt     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Target    Target[]
}

model Target {
  id        Int      @id @default(autoincrement())
  exerciseId    Int
  Exercise      Exercise     @relation(fields: [exerciseId], references: [id])
  groupId    Int
  Group      Group     @relation(fields: [groupId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model WorkoutExercise {
  id        Int      @id @default(autoincrement())
  userId    Int
  User      User     @relation(fields: [userId], references: [id])
  exerciseId    Int
  Exercise      Exercise     @relation(fields: [exerciseId], references: [id])
  workoutId    Int
  Workout      Workout     @relation(fields: [workoutId], references: [id])
  deleted   Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  WorkoutExerciseLog    WorkoutExerciseLog[]
}

model WorkoutExerciseLog {
  id        Int      @id @default(autoincrement())
  workoutExerciseId    Int
  WorkoutExercise      WorkoutExercise     @relation(fields: [workoutExerciseId], references: [id])
  sets      Int
  repetitions      Int
  weight      Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
